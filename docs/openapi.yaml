openapi: 3.0.0
info:
  title: Cinema Vault API
  description: API for managing movies and users
  version: 1.0.0
servers:
  - url: http://127.0.0.1:4000/{version}
    variables:
      version:
        default: v1
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        activated:
          type: boolean
        created_at:
          type: string
          format: date-time
    AuthenticationToken:
      type: object
      properties:
        token:
          type: string
        expiry:
          type: string
          format: date-time
    Movie:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        year:
          type: integer
        runtime:
          type: string
          pattern: "^\\d+ mins$"
        genres:
          type: array
          items:
            type: string
        version:
          type: integer
    Metadata:
      type: object
      properties:
        current_page:
          type: integer
        page_size:
          type: integer
        first_page:
          type: integer
        last_page:
          type: integer
        total_records:
          type: integer
paths:
  /healthcheck:
    get:
      summary: Health check endpoint
      operationId: healthCheck
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  system_info:
                    type: object
                    properties:
                      environment:
                        type: string
                      version:
                        type: string
  /users:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
  /tokens/authentication:
    post:
      summary: Authenticate user
      operationId: authenticateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication_token:
                    $ref: '#/components/schemas/AuthenticationToken'
  /users/activated:
    put:
      summary: Activate user account
      operationId: activateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: User activated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
  /movies:
    get:
      summary: List all movies
      operationId: listMovies
      responses:
        '200':
          description: List of movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/Metadata'
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
    post:
      summary: Create a new movie
      operationId: createMovie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                year:
                  type: integer
                runtime:
                  type: string
                  pattern: "^\\d+ mins$"
                genres:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Movie created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie:
                    $ref: '#/components/schemas/Movie'
  /movies/{id}:
    get:
      summary: Get movie by ID
      operationId: getMovieById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Movie details
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie:
                    $ref: '#/components/schemas/Movie'
    patch:
      summary: Update movie details
      operationId: updateMovie
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                genres:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie:
                    $ref: '#/components/schemas/Movie'
    delete:
      summary: Delete a movie
      operationId: deleteMovie
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Movie deleted successfully
